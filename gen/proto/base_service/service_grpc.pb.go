// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package base_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	InsertCategory(ctx context.Context, in *Request_InsertCategory, opts ...grpc.CallOption) (*Response_InsertCategory, error)
	GetCategory(ctx context.Context, in *Request_GetCategory, opts ...grpc.CallOption) (*Response_GetCategory, error)
	UpdateCategory(ctx context.Context, in *Request_UpdateCategory, opts ...grpc.CallOption) (*Response_UpdateCategory, error)
	DeleteCategory(ctx context.Context, in *Request_DeleteCategory, opts ...grpc.CallOption) (*Response_DeleteCategory, error)
	InsertSource(ctx context.Context, in *Request_InsertSource, opts ...grpc.CallOption) (*Response_InsertSource, error)
	GetSource(ctx context.Context, in *Request_GetSource, opts ...grpc.CallOption) (*Response_GetSource, error)
	UpdateSource(ctx context.Context, in *Request_UpdateSource, opts ...grpc.CallOption) (*Response_UpdateSource, error)
	DeleteSource(ctx context.Context, in *Request_DeleteSource, opts ...grpc.CallOption) (*Response_DeleteSource, error)
	InsertIncoming(ctx context.Context, in *Request_InsertIncoming, opts ...grpc.CallOption) (*Response_InsertIncoming, error)
	GetIncoming(ctx context.Context, in *Request_GetIncoming, opts ...grpc.CallOption) (*Response_GetIncoming, error)
	UpdateIncoming(ctx context.Context, in *Request_UpdateIncoming, opts ...grpc.CallOption) (*Response_UpdateIncoming, error)
	DeleteIncoming(ctx context.Context, in *Request_DeleteIncoming, opts ...grpc.CallOption) (*Response_DeleteIncoming, error)
	InsertSpend(ctx context.Context, in *Request_InsertSpend, opts ...grpc.CallOption) (*Response_InsertSpend, error)
	GetSpend(ctx context.Context, in *Request_GetSpend, opts ...grpc.CallOption) (*Response_GetSpend, error)
	UpdateSpend(ctx context.Context, in *Request_UpdateSpend, opts ...grpc.CallOption) (*Response_UpdateSpend, error)
	DeleteSpend(ctx context.Context, in *Request_DeleteSpend, opts ...grpc.CallOption) (*Response_DeleteSpend, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) InsertCategory(ctx context.Context, in *Request_InsertCategory, opts ...grpc.CallOption) (*Response_InsertCategory, error) {
	out := new(Response_InsertCategory)
	err := c.cc.Invoke(ctx, "/base_service.TestService/InsertCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetCategory(ctx context.Context, in *Request_GetCategory, opts ...grpc.CallOption) (*Response_GetCategory, error) {
	out := new(Response_GetCategory)
	err := c.cc.Invoke(ctx, "/base_service.TestService/GetCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UpdateCategory(ctx context.Context, in *Request_UpdateCategory, opts ...grpc.CallOption) (*Response_UpdateCategory, error) {
	out := new(Response_UpdateCategory)
	err := c.cc.Invoke(ctx, "/base_service.TestService/UpdateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) DeleteCategory(ctx context.Context, in *Request_DeleteCategory, opts ...grpc.CallOption) (*Response_DeleteCategory, error) {
	out := new(Response_DeleteCategory)
	err := c.cc.Invoke(ctx, "/base_service.TestService/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) InsertSource(ctx context.Context, in *Request_InsertSource, opts ...grpc.CallOption) (*Response_InsertSource, error) {
	out := new(Response_InsertSource)
	err := c.cc.Invoke(ctx, "/base_service.TestService/InsertSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetSource(ctx context.Context, in *Request_GetSource, opts ...grpc.CallOption) (*Response_GetSource, error) {
	out := new(Response_GetSource)
	err := c.cc.Invoke(ctx, "/base_service.TestService/GetSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UpdateSource(ctx context.Context, in *Request_UpdateSource, opts ...grpc.CallOption) (*Response_UpdateSource, error) {
	out := new(Response_UpdateSource)
	err := c.cc.Invoke(ctx, "/base_service.TestService/UpdateSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) DeleteSource(ctx context.Context, in *Request_DeleteSource, opts ...grpc.CallOption) (*Response_DeleteSource, error) {
	out := new(Response_DeleteSource)
	err := c.cc.Invoke(ctx, "/base_service.TestService/DeleteSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) InsertIncoming(ctx context.Context, in *Request_InsertIncoming, opts ...grpc.CallOption) (*Response_InsertIncoming, error) {
	out := new(Response_InsertIncoming)
	err := c.cc.Invoke(ctx, "/base_service.TestService/InsertIncoming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetIncoming(ctx context.Context, in *Request_GetIncoming, opts ...grpc.CallOption) (*Response_GetIncoming, error) {
	out := new(Response_GetIncoming)
	err := c.cc.Invoke(ctx, "/base_service.TestService/GetIncoming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UpdateIncoming(ctx context.Context, in *Request_UpdateIncoming, opts ...grpc.CallOption) (*Response_UpdateIncoming, error) {
	out := new(Response_UpdateIncoming)
	err := c.cc.Invoke(ctx, "/base_service.TestService/UpdateIncoming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) DeleteIncoming(ctx context.Context, in *Request_DeleteIncoming, opts ...grpc.CallOption) (*Response_DeleteIncoming, error) {
	out := new(Response_DeleteIncoming)
	err := c.cc.Invoke(ctx, "/base_service.TestService/DeleteIncoming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) InsertSpend(ctx context.Context, in *Request_InsertSpend, opts ...grpc.CallOption) (*Response_InsertSpend, error) {
	out := new(Response_InsertSpend)
	err := c.cc.Invoke(ctx, "/base_service.TestService/InsertSpend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) GetSpend(ctx context.Context, in *Request_GetSpend, opts ...grpc.CallOption) (*Response_GetSpend, error) {
	out := new(Response_GetSpend)
	err := c.cc.Invoke(ctx, "/base_service.TestService/GetSpend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) UpdateSpend(ctx context.Context, in *Request_UpdateSpend, opts ...grpc.CallOption) (*Response_UpdateSpend, error) {
	out := new(Response_UpdateSpend)
	err := c.cc.Invoke(ctx, "/base_service.TestService/UpdateSpend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) DeleteSpend(ctx context.Context, in *Request_DeleteSpend, opts ...grpc.CallOption) (*Response_DeleteSpend, error) {
	out := new(Response_DeleteSpend)
	err := c.cc.Invoke(ctx, "/base_service.TestService/DeleteSpend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	InsertCategory(context.Context, *Request_InsertCategory) (*Response_InsertCategory, error)
	GetCategory(context.Context, *Request_GetCategory) (*Response_GetCategory, error)
	UpdateCategory(context.Context, *Request_UpdateCategory) (*Response_UpdateCategory, error)
	DeleteCategory(context.Context, *Request_DeleteCategory) (*Response_DeleteCategory, error)
	InsertSource(context.Context, *Request_InsertSource) (*Response_InsertSource, error)
	GetSource(context.Context, *Request_GetSource) (*Response_GetSource, error)
	UpdateSource(context.Context, *Request_UpdateSource) (*Response_UpdateSource, error)
	DeleteSource(context.Context, *Request_DeleteSource) (*Response_DeleteSource, error)
	InsertIncoming(context.Context, *Request_InsertIncoming) (*Response_InsertIncoming, error)
	GetIncoming(context.Context, *Request_GetIncoming) (*Response_GetIncoming, error)
	UpdateIncoming(context.Context, *Request_UpdateIncoming) (*Response_UpdateIncoming, error)
	DeleteIncoming(context.Context, *Request_DeleteIncoming) (*Response_DeleteIncoming, error)
	InsertSpend(context.Context, *Request_InsertSpend) (*Response_InsertSpend, error)
	GetSpend(context.Context, *Request_GetSpend) (*Response_GetSpend, error)
	UpdateSpend(context.Context, *Request_UpdateSpend) (*Response_UpdateSpend, error)
	DeleteSpend(context.Context, *Request_DeleteSpend) (*Response_DeleteSpend, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) InsertCategory(context.Context, *Request_InsertCategory) (*Response_InsertCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertCategory not implemented")
}
func (UnimplementedTestServiceServer) GetCategory(context.Context, *Request_GetCategory) (*Response_GetCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategory not implemented")
}
func (UnimplementedTestServiceServer) UpdateCategory(context.Context, *Request_UpdateCategory) (*Response_UpdateCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategory not implemented")
}
func (UnimplementedTestServiceServer) DeleteCategory(context.Context, *Request_DeleteCategory) (*Response_DeleteCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedTestServiceServer) InsertSource(context.Context, *Request_InsertSource) (*Response_InsertSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSource not implemented")
}
func (UnimplementedTestServiceServer) GetSource(context.Context, *Request_GetSource) (*Response_GetSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSource not implemented")
}
func (UnimplementedTestServiceServer) UpdateSource(context.Context, *Request_UpdateSource) (*Response_UpdateSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSource not implemented")
}
func (UnimplementedTestServiceServer) DeleteSource(context.Context, *Request_DeleteSource) (*Response_DeleteSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSource not implemented")
}
func (UnimplementedTestServiceServer) InsertIncoming(context.Context, *Request_InsertIncoming) (*Response_InsertIncoming, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertIncoming not implemented")
}
func (UnimplementedTestServiceServer) GetIncoming(context.Context, *Request_GetIncoming) (*Response_GetIncoming, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncoming not implemented")
}
func (UnimplementedTestServiceServer) UpdateIncoming(context.Context, *Request_UpdateIncoming) (*Response_UpdateIncoming, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncoming not implemented")
}
func (UnimplementedTestServiceServer) DeleteIncoming(context.Context, *Request_DeleteIncoming) (*Response_DeleteIncoming, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIncoming not implemented")
}
func (UnimplementedTestServiceServer) InsertSpend(context.Context, *Request_InsertSpend) (*Response_InsertSpend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSpend not implemented")
}
func (UnimplementedTestServiceServer) GetSpend(context.Context, *Request_GetSpend) (*Response_GetSpend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpend not implemented")
}
func (UnimplementedTestServiceServer) UpdateSpend(context.Context, *Request_UpdateSpend) (*Response_UpdateSpend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpend not implemented")
}
func (UnimplementedTestServiceServer) DeleteSpend(context.Context, *Request_DeleteSpend) (*Response_DeleteSpend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpend not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_InsertCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_InsertCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).InsertCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/InsertCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).InsertCategory(ctx, req.(*Request_InsertCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_GetCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/GetCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetCategory(ctx, req.(*Request_GetCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_UpdateCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/UpdateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UpdateCategory(ctx, req.(*Request_UpdateCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_DeleteCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).DeleteCategory(ctx, req.(*Request_DeleteCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_InsertSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_InsertSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).InsertSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/InsertSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).InsertSource(ctx, req.(*Request_InsertSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_GetSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/GetSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetSource(ctx, req.(*Request_GetSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UpdateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_UpdateSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UpdateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/UpdateSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UpdateSource(ctx, req.(*Request_UpdateSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_DeleteSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_DeleteSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).DeleteSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/DeleteSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).DeleteSource(ctx, req.(*Request_DeleteSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_InsertIncoming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_InsertIncoming)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).InsertIncoming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/InsertIncoming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).InsertIncoming(ctx, req.(*Request_InsertIncoming))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetIncoming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_GetIncoming)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetIncoming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/GetIncoming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetIncoming(ctx, req.(*Request_GetIncoming))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UpdateIncoming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_UpdateIncoming)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UpdateIncoming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/UpdateIncoming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UpdateIncoming(ctx, req.(*Request_UpdateIncoming))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_DeleteIncoming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_DeleteIncoming)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).DeleteIncoming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/DeleteIncoming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).DeleteIncoming(ctx, req.(*Request_DeleteIncoming))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_InsertSpend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_InsertSpend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).InsertSpend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/InsertSpend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).InsertSpend(ctx, req.(*Request_InsertSpend))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_GetSpend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_GetSpend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).GetSpend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/GetSpend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).GetSpend(ctx, req.(*Request_GetSpend))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_UpdateSpend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_UpdateSpend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).UpdateSpend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/UpdateSpend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).UpdateSpend(ctx, req.(*Request_UpdateSpend))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_DeleteSpend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request_DeleteSpend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).DeleteSpend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base_service.TestService/DeleteSpend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).DeleteSpend(ctx, req.(*Request_DeleteSpend))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base_service.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertCategory",
			Handler:    _TestService_InsertCategory_Handler,
		},
		{
			MethodName: "GetCategory",
			Handler:    _TestService_GetCategory_Handler,
		},
		{
			MethodName: "UpdateCategory",
			Handler:    _TestService_UpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _TestService_DeleteCategory_Handler,
		},
		{
			MethodName: "InsertSource",
			Handler:    _TestService_InsertSource_Handler,
		},
		{
			MethodName: "GetSource",
			Handler:    _TestService_GetSource_Handler,
		},
		{
			MethodName: "UpdateSource",
			Handler:    _TestService_UpdateSource_Handler,
		},
		{
			MethodName: "DeleteSource",
			Handler:    _TestService_DeleteSource_Handler,
		},
		{
			MethodName: "InsertIncoming",
			Handler:    _TestService_InsertIncoming_Handler,
		},
		{
			MethodName: "GetIncoming",
			Handler:    _TestService_GetIncoming_Handler,
		},
		{
			MethodName: "UpdateIncoming",
			Handler:    _TestService_UpdateIncoming_Handler,
		},
		{
			MethodName: "DeleteIncoming",
			Handler:    _TestService_DeleteIncoming_Handler,
		},
		{
			MethodName: "InsertSpend",
			Handler:    _TestService_InsertSpend_Handler,
		},
		{
			MethodName: "GetSpend",
			Handler:    _TestService_GetSpend_Handler,
		},
		{
			MethodName: "UpdateSpend",
			Handler:    _TestService_UpdateSpend_Handler,
		},
		{
			MethodName: "DeleteSpend",
			Handler:    _TestService_DeleteSpend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base_service/service.proto",
}
